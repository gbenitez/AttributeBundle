easy_admin:
    entities:
        Attribute:
            class: Gbenitez\AttributeBundle\Entity\Attribute
            label: Form Attributes
            templates:
                new: "@GbenitezAttribute/easy_admin/new.html.twig"
                edit: "@GbenitezAttribute/easy_admin/edit.html.twig"
            list:
                title: 'Form Attributes'
                fields: ['id', 'name', 'presentation', 'type', 'targetEntity', 'region', 'owner', 'active']
            form:
                fields:
                    - 'name'
                    - 'presentation'
                    -
                        property: 'targetEntity'
                        type: 'Gbenitez\AttributeBundle\Form\Type\Admin\TargetEntityType'
                    - { property: 'type' }
                    -
                        property: 'value_template'
                        type: 'Gbenitez\AttributeBundle\Form\Type\Admin\ValueTemplateType'
                        required: false
                        type_options:
                            attr: { 'data-ace': 'twig', 'data-ace-height': '100px' }
                        help: >
                            Permite escribir código twig para obtener el valor del atributo.
                            <br>Es posible usar las funciones y filtros definidos en
                            <a href="http://twig.sensiolabs.org/documentation" target="_blank">
                            http://twig.sensiolabs.org/documentation</a>
                            <br>Variables disponibles: value, attribute, attribute_value, configuration, context

                    - { property: 'owner' }
                    -
                        property: 'region'
                        type: 'entity'
                        type_options:
                            class: '@Gbenitez\AttributeBundle\Entity\Region'
                    - 'containerClass'
                    -
                        property: 'configuration'
                        type: 'Gbenitez\AttributeBundle\Form\Type\YamlType'
                        type_options:
                            attr: { 'data-ace': 'yaml' }
                    -
                        property: constraints
                        type: 'Gbenitez\AttributeBundle\Form\Type\YamlType'
                        type_options:
                            attr: { 'data-ace': 'yaml', 'data-ace-height': '200px' }
                    -
                        property: 'javascriptCode'
                        type: 'textarea'
                        type_options:
                            attr: { 'data-ace': 'javascript' }
                        help: >
                            Permite escribir código javascript para añadir funcionalidad extra al atributo.
                            Funciones disponibles:
                            <ul>
                            <li><b>$.attributeField(name)</b> devuelve el atributo por su nombre(campo de formulario o tag html),
                            se pueden indicar varios nombres separados por coma</li>
                            <li><b>$attributo.attributeContainer()</b> devuelve el contenedor del atributo
                            (se puede pasar un selector para el contenedor)</li>
                            </ul>
                            Trabajando con contextos y acciones:<br/>
                            Si necesitamos funcionalidades para cuando se visualiza el formulario y para
                            cuando se visualizan los atributos.
                            Podemos definir acciones javascript de la forma "{contexto}_action($attributo)".<br/>
                            por ejemplo si el contexto es de formulario la funcion debe ser form_action($input),
                            si el contexto es "show" la función será "show_action($element)".
                    - { property: 'active', required: false }
        Region:
            class: '@Gbenitez\AttributeBundle\Entity\Region'
            label: 'Regions [Attributes]'
